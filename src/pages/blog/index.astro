---
import BlogLayout from "../../layouts/BlogLayout.astro";
import { Code } from "astro/components";
import Grid from "../../components/datasheet/Grid";

const code = `
    // Grid.tsx
    import { useState, useEffect } from "react";
    import Cell from "./Cell";

    type Props = {
      rows: number,
      cols: number
    };

    export type SelectedCells = {
      start: {
        row: number,
        col: number
      } | null,
      end: {
        row: number,
        col: number
      } | null
    };

    export default function Grid({ rows, cols }: Props) {
      const [selectedCells, setSelectedCells] = useState<SelectedCells>({ start: null, end: null });
      const [shiftPressed, setShiftPressed] = useState(false);
      const table_rows = makeTable(rows, cols);

      function selectCells(row: number, col: number) {
        if (!shiftPressed || !selectedCells?.start) {
          setSelectedCells({
            end: null,
            start: { row, col }
          });
        } else {
          setSelectedCells({
            ...selectedCells,
            end: { row, col }
          });
        }
      }

      function makeTable(rows: number, cols: number) {
        let table = [];

        for (let i = 0; i < rows; i++) {
          let row = [];
          for (let j = 0; j < cols; j++) {
            const cell = <Cell key={${"`cell-[${i}, ${j}]`"}} row={i} col={j} selectCells={selectCells} selectedCells={selectedCells} />
            row.push(cell);
          }
          table.push(row);
        }

        return table;
      }

      useEffect(() => {
        const keyDownHandler = (event: KeyboardEvent) => {
          if (event.key === 'Shift') {
            event.preventDefault();
            setShiftPressed(true);
          } else {
            setShiftPressed(false);
          }
        };

        document.addEventListener('keydown', keyDownHandler);
        document.addEventListener('keyup', _ => setShiftPressed(false));

        return () => {
          document.removeEventListener('keydown', keyDownHandler);
          document.removeEventListener('keyup', _ => setShiftPressed(false));
        };
      }, []);

      return (
        <table className="px-5 my-20 md:w-80% lg:w-70%">
          <tbody>
            {table_rows.map((row, row_idx) => <tr key={row_idx}>
              {row.map(cell => cell)}
            </tr>)}
          </tbody>
        </table>
      )
    }`;

const border_code = `
  function selectedCellBorders(start_row: number, start_col: number, end_row: number, end_col: number, cell_row: number, cell_col: number): string {
    let border_str = "";

    if (start_col === end_col && start_col === cell_col) { border_str += "border-x-4 " }
    if (cell_row === start_row) border_str += "border-t-4 ";
    if (cell_row === end_row) border_str += "border-b-4 ";
    if (cell_col === start_col) border_str += "border-l-4 ";
    if (cell_col === end_col) border_str += "border-r-4 ";

    return border_str;
  }
`;
---

<BlogLayout title="Blog">
  <section class="w-full h-screen max-w-7xl flex flex-col items-center mx-auto">
    <h1 class="mb-6 mt-24 uppercase tracking-[20px] text-gray-500 text-2xl">
      blog index
    </h1>

    <div class="flex flex-col px-5 md:px-0">
      <p>
        This is a fun little side project I intend on updating every now and
        then when I encounter a fun problem/solution I want to share
      </p>
      <p>
        I intend on uploading the challenges I face and the solutions I come up
        with, as well as relevant code snippets in order to have more context
      </p>
      <p>
        Update: I completely neglected my own "fun little side project" lol, so
        I decided to start making a mini Excel in a webpage. Therefore I have
        lots of stuff to do. First I started doing a simple indexed grid system
        which was easy enough. After that I started thinking how I was gonna do
        the cell selection system which would become pretty important in the
        future in order to do basically everything, so that's exactly what I
        made with the following code:
      </p>
      <div class="max-h-[70vh] overflow-y-scroll">
        <Code lang="js" code={code} theme="dark-plus" wrap />
      </div>
      <Grid rows={5} cols={5} client:load />
      <div class="max-h-[70vh] overflow-y-scroll">
        <Code lang="js" code={border_code} theme="dark-plus" wrap />
      </div>
    </div>
  </section>
</BlogLayout>
